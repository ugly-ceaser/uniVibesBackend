generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password           String
  role               Role          @default(GUEST)
  regNumber          String?       @unique
  department         String?
  faculty            String?
  level              Int?
  verificationStatus Boolean?      @default(false)
  status             Status        @default(Cleared)
  createdAt          DateTime      @default(now())
  avatarUrl          String?
  fullname           String
  nin                String?
  phone              String?
  semester           String?
  answers            Answer[]
  chatSessions       ChatSession[]
  comments           Comment[]
  forum              Forum[]
  likes              Likes[]
  questions          Question[]
}

model Course {
  id           String        @id @default(uuid())
  name         String
  code         String
  level        String
  coordinator  String
  unitLoad     Int
  semester     Int
  createdAt    DateTime      @default(now())
  department   String
  outline      String[]
  chatSessions ChatSession[]
}

model MapLocation {
  id          String         @id @default(uuid())
  name        String
  description String?
  latitude    Float
  longitude   Float
  status      LocationStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
}

model Forum {
  id                 String     @id @default(uuid())
  name               String     @unique
  verificationStatus Boolean?   @default(false)
  creatorId          String?
  createdAt          DateTime   @default(now())
  visibiltyStatus    Boolean    @default(false)
  creator            User?      @relation(fields: [creatorId], references: [id])
  questions          Question[]
}

model Question {
  id        String        @id @default(uuid())
  title     String
  body      String
  forumId   String?
  status    Status        @default(Cleared)
  authorId  String?
  createdAt DateTime      @default(now())
  category  ForumCategory @default(GENERAL_DISCUSSION)
  answers   Answer[]
  author    User?         @relation(fields: [authorId], references: [id])
  forum     Forum?        @relation(fields: [forumId], references: [id])
}

model Answer {
  id            String    @id @default(uuid())
  body          String
  authorId      String?
  questionId    String
  status        Status    @default(Cleared)
  createdAt     DateTime  @default(now())
  commentsCount Int       @default(0)
  author        User?     @relation(fields: [authorId], references: [id])
  question      Question  @relation(fields: [questionId], references: [id])
  comments      Comment[] @relation("AnswerComments")

  @@index([questionId])
}

model Comment {
  id         String    @id @default(uuid())
  body       String
  authorId   String?
  answerId   String?
  parentId   String?
  status     Status    @default(Cleared)
  replyCount Int       @default(0)
  createdAt  DateTime  @default(now())
  answer     Answer?   @relation("AnswerComments", fields: [answerId], references: [id])
  author     User?     @relation(fields: [authorId], references: [id])
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")

  @@index([answerId])
  @@index([parentId])
  @@index([createdAt])
}

model GuideItem {
  id         String   @id @default(uuid())
  title      String
  content    String
  status     Status   @default(Cleared)
  likesCount Int      @default(0)
  createdAt  DateTime @default(now())
}

model Likes {
  id          String      @id @default(uuid())
  userId      String?
  contentId   String
  contentType ContentType
  user        User?       @relation(fields: [userId], references: [id])
}

// Enhanced AI Chat Session model based on requirements
model ChatSession {
  id              String      @id @default(uuid())
  studentId       String
  courseId        String?
  sessionType     SessionType @default(general)
  title           String
  status          SessionStatus @default(active)
  metadata        Json?       // Store course context, user preferences, etc.
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastMessageAt   DateTime?
  
  // Relations
  student         User         @relation(fields: [studentId], references: [id])
  course          Course?      @relation(fields: [courseId], references: [id])
  messages        ChatMessage[]
  analytics       ChatAnalytics[]

  // Indexes for performance
  @@index([studentId, courseId])
  @@index([studentId, sessionType])
  @@index([lastMessageAt])
  @@index([createdAt])
  
  // Constraint: One active session per student per course
  @@unique([studentId, courseId, sessionType], name: "unique_active_course_session")
}

// Enhanced AI Chat Message model with sequence tracking
model ChatMessage {
  id              String        @id @default(uuid())
  sessionId       String
  role            MessageRole
  content         String        @db.Text
  contentType     MessageContentType @default(text)
  metadata        Json?         // Store confidence, sources, tokens, cost, etc.
  sequenceNumber  Int           // For proper message ordering
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  session         ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  analytics       ChatAnalytics[]

  // Indexes for performance
  @@index([sessionId, sequenceNumber])
  @@index([sessionId, createdAt])
  @@index([sessionId, role])
  
  // Ensure unique sequence per session
  @@unique([sessionId, sequenceNumber])
}

// AI Chat Analytics for tracking usage, costs, and performance
model ChatAnalytics {
  id              String      @id @default(uuid())
  sessionId       String
  messageId       String?
  tokensUsed      Int?
  modelUsed       String?
  responseTimeMs  Int?
  costUsd         Decimal?    @db.Decimal(10, 8)
  confidenceScore Decimal?    @db.Decimal(3, 2) // 0.00 to 1.00
  createdAt       DateTime    @default(now())
  
  // Relations
  session         ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  message         ChatMessage? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  // Indexes for analytics queries
  @@index([sessionId])
  @@index([modelUsed, createdAt])
  @@index([createdAt, costUsd])
}

enum Role {
  STUDENT
  GUEST
  ADMIN
}

enum ContentType {
  GuideItem
  Answer
  Comment
}

enum Status {
  Reported
  Investigated
  Block
  Cleared
}

enum LocationStatus {
  ACTIVE
  INACTIVE
}

enum ForumCategory {
  GENERAL_DISCUSSION
  ACADEMIC_HELP
  STUDENT_LIFE
  CAREER_AND_INTERNSHIPS
  TECH_AND_PROGRAMMING
  CAMPUS_SERVICES
}

// ================= AI Chat Enums =================

enum SessionType {
  course
  general
  academic
  campus
}

enum SessionStatus {
  active
  archived
  deleted
}

enum MessageRole {
  user
  assistant
  system
}

enum MessageContentType {
  text
  markdown
  json
}
