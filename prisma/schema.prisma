generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================= Enums =================

enum Role {
  STUDENT
  GUEST
  ADMIN
}

enum ContentType {
  GuideItem
  Answer
  Comment
}

enum Status {
  Reported
  Investigated
  Block
  Cleared
}

enum LocationStatus {
  ACTIVE
  INACTIVE
}

// Forum post categories
enum ForumCategory {
  GENERAL_DISCUSSION
  ACADEMIC_HELP
  STUDENT_LIFE
  CAREER_AND_INTERNSHIPS
  TECH_AND_PROGRAMMING
  CAMPUS_SERVICES
}

// ================= Models =================

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  fullname            String
  password            String
  role                Role           @default(GUEST)
  regNumber           String?        @unique
  department          String?
  faculty             String?
  level               Int?
  semester            String?
  phone               String?
  nin                 String?
  avatarUrl           String?
  verificationStatus  Boolean?       @default(false)
  status              Status         @default(Cleared)
  createdAt           DateTime       @default(now())

  // Relations
  questions           Question[]
  answers             Answer[]
  comments            Comment[]
  forum               Forum[]
  likes               Likes[]
  chatSessions        ChatSession[]  // NEW: Studentâ€™s AI chat sessions
}

model Course {
  id          String   @id @default(uuid())
  name        String
  code        String
  level       String
  coordinator String
  outline     String[]
  unitLoad    Int
  semester    Int
  department  String
  createdAt   DateTime @default(now())
}

model MapLocation {
  id          String         @id @default(uuid())
  name        String
  description String?
  latitude    Float
  longitude   Float
  status      LocationStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
}

model Forum {
  id                 String     @id @default(uuid())
  name               String     @unique
  creator            User?      @relation(fields:[creatorId], references:[id])
  verificationStatus Boolean?   @default(false)
  creatorId          String?
  createdAt          DateTime   @default(now())
  visibiltyStatus    Boolean    @default(false)

  // Relations
  questions          Question[]
}

model Question {
  id        String        @id @default(uuid())
  title     String
  body      String
  category  ForumCategory @default(GENERAL_DISCUSSION)
  forum     Forum?        @relation(fields:[forumId], references: [id])
  forumId   String?
  author    User?         @relation(fields: [authorId], references: [id])
  status    Status        @default(Cleared)
  authorId  String?
  answers   Answer[]
  createdAt DateTime      @default(now())
}

model Answer {
  id            String     @id @default(uuid())
  body          String
  author        User?      @relation(fields: [authorId], references: [id])
  authorId      String?
  question      Question   @relation(fields: [questionId], references: [id])
  questionId    String
  status        Status     @default(Cleared)
  createdAt     DateTime   @default(now())
  comments      Comment[]  @relation("AnswerComments")
  commentsCount Int        @default(0) // denormalized for fast count display

  @@index([questionId])
}

model Comment {
  id         String     @id @default(uuid())
  body       String
  author     User?      @relation(fields: [authorId], references: [id])
  authorId   String?
  answer     Answer?    @relation("AnswerComments", fields: [answerId], references: [id])
  answerId   String?
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   String?
  status     Status     @default(Cleared)
  replies    Comment[]  @relation("CommentReplies")
  replyCount Int        @default(0) // denormalized replies count
  createdAt  DateTime   @default(now())

  @@index([answerId])
  @@index([parentId])
  @@index([createdAt])
}

model GuideItem {
  id          String   @id @default(uuid())
  title       String
  content     String
  status      Status   @default(Cleared)
  likesCount  Int      @default(0) // denormalized for fast likes display
  createdAt   DateTime @default(now())
}

model Likes {
  id          String      @id @default(uuid())
  contentType ContentType
  user        User?       @relation(fields:[userId], references:[id])
  userId      String?
  contentId   String
}

// ================= AI Chat Models =================

model ChatSession {
  id         String       @id @default(uuid())
  student    User         @relation(fields: [studentId], references: [id])
  studentId  String
  title      String?      // e.g. "Photosynthesis Notes"
  createdAt  DateTime     @default(now())

  messages   ChatMessage[]
}

model ChatMessage {
  id         String       @id @default(uuid())
  session    ChatSession  @relation(fields: [sessionId], references: [id])
  sessionId  String
  role       String       // "system" | "user" | "assistant"
  content    String
  createdAt  DateTime     @default(now())

  @@index([sessionId])
}
